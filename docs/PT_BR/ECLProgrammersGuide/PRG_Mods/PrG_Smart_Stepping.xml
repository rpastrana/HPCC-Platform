<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Smart_Stepping">
  <title><emphasis role="bold">Smart Stepping (Escalonamento
  Inteligente)</emphasis></title>

  <sect2 id="PG_Overview">
    <title>Visão geral</title>

    <para>O Escalonamento inteligente é um conjunto de técnicas de indexação
    que, juntas, compõem um método de realização de operações de junção/junção
    de mesclagem com variação <emphasis>n</emphasis>, onde
    <emphasis>n</emphasis> é definido como dois ou mais datasets. O
    Escalonamento inteligente permite que o supercomputador combine registros
    de forma eficiente a partir múltiplas fontes de dados filtradas, incluindo
    subconjuntos do mesmo dataset. Ele é especialmente eficiente quando as
    correspondência são esparsas e não correlatas. O Escalonamento inteligente
    também é compatível com a junção de registros de datasets M de N.</para>

    <para>Antes da criação do Escalonamento inteligente, a localização das
    interseções de registros de múltiplos datasets era feita ao extrair as
    possíveis correspondências de um dataset e depois combinando o conjunto
    candidato a cada um dos outros datasets sucessivamente. As junções usariam
    diversos mecanismos, incluindo consultas de índice, ou fariam a leitura
    das possíveis correspondências de um dataset e, depois, juntam-se a eles.
    Isso significa que a única maneira de unir múltiplos datasets exigia que,
    no mínimo, um dataset fosse lido inteiramente e depois unido aos outros.
    Isso poderia ser bastante ineficaz se o programador não tomasse cuidado
    para selecionar a ordem mais eficiente de leitura dos datasets.
    Infelizmente, é impossível saber com antecedência qual ordem seria a
    melhor. Muitas vezes, também é impossível ordenar as junções para que os
    dois termos menos frequentes sejam unidos. A implementação eficiente das
    variedades de junção M de N foi particularmente difícil.</para>

    <para>Com a tecnologia de Escalonamento inteligente, essas junções de
    múltiplos datasets se tornam uma operação única e eficiente em vez de uma
    série de operações múltiplas. O Escalonamento inteligente só pode ser
    usado no contexto onde a condição da junção é principalmente um teste de
    semelhança entre as colunas nos datasets de entrada, e os datasets de
    entrada precisam ter o resultado classificado por essas colunas.</para>

    <para>O Escalonamento inteligente também oferece uma maneira eficiente de
    transmitir informações de um dataset classificadas por qualquer ordem de
    classificação à direita. Anteriormente, se você tivesse um dataset
    classificado (muitas vezes um índice) que precisasse ser filtrado por
    alguns componentes à esquerda, e depois classificar as linhas resultantes
    pelos componentes à direita, seria necessário fazer a leitura de todo o
    resultado filtrado para depois classificar o resultado.</para>

    <para>O Escalonamento inteligente pode usar quantidades significativas de
    armazenamento temporário caso não seja usado da maneira correta. Por isso,
    deve-se ter atenção para que ele seja usado de forma devida.</para>
  </sect2>

  <sect2 id="Trailing_Field_Sorts">
    <title>Ordenação de campos à direita</title>

    <para>A função STEPPED oferece a capacidade de classificação pelos
    principais campos de componentes de chave à direita de modo muito mais
    eficiente do que a classificação após a filtragem (o único método até
    então disponível para fazer isso). Os campos de chaves à direita
    escalonados permitem que as linhas classificadas sejam retornadas sem a
    leitura de todo o dataset.</para>

    <para>Antes da criação do Escalonamento inteligente, um dataset ou índice
    classificado poderia produzir linhas filtradas de forma eficiente, ou
    linhas classificadas na mesma ordem daquela original, mas não era capaz de
    produzir de modo eficiente linhas classificadas por uma ordem de
    classificação à direita do índice (sejam elas filtradas ou não). O método
    de filtragem seguido de pós-classificação exigia que todas as linhas do
    dataset fossem lidas antes que quaisquer linhas classificadas pudessem ser
    localizadas. O Escalonamento inteligente permite que os dados
    classificados sejam lidos imediatamente (e, dessa forma,
    parcialmente).</para>

    <para>A maneira mais fácil de ver o efeito é com este exemplo (contido no
    arquivo SmartStepping1.ECL – este código precisa ser executado no hthor ou
    Roxie, não no Thor):</para>

    <programlisting>IMPORT $; 
IDX := $.DeclareData.IDX__Person_State_City_Zip_LastName_FirstName_Payload;
Filter := IDX.State = 'LA' AND IDX.City = 'ABBEVILLE';
 //filter by the leading index elements
 //and sort the output by a trailing element
OUTPUT(SORT(IDX(Filter),FirstName),ALL);  //the old way
OUTPUT(STEPPED(IDX(Filter),FirstName),ALL); //Smart Stepping </programlisting>

    <para>O método anterior de realização deste procedimento implicava na
    produção do conjunto de resultado filtrado, seguido do uso de SORT para
    alcançar a ordem de classificação desejada. O novo método é bastante
    similar, usando STEPPED em vez de SORT, e ambos OUTPUTs produzem o mesmo
    resultado, mas a eficiência dos métodos pelos quais os resultados são
    alcançados é bastante diferente.</para>

    <para>Depois de executar esse código com sucesso e obter o resultado,
    observe a página Graphs.</para>

    <para>Observe que o primeiro subgráfico do OUTPUT contém três atividades:
    a leitura do índice, a classificação e o resultado. Porém o segundo
    subgráfico do OUTPUT contém apenas duas atividades: a leitura do índice e
    o resultado. Todo o trabalho do Escalonamento inteligente para produzir o
    resultado é feito pela leitura de índice. Então, se você acessar a página
    do ECL Watch da tarefa e procurar as medidas de tempo, você deve ver que o
    tempo do segundo gráfico 1-1 do OUTPUT é significativamente inferior ao do
    primeiro gráfico 1-2:</para>

    <para>Isso demonstra o tipo de vantagem de desempenho que o Escalonamento
    inteligente pode ter sobre métodos anteriores. É claro que a vantagem de
    desempenho real é vista quando você solicita apenas os primeiros
    <emphasis>n</emphasis> registros, como neste exemplo (contido no arquivo
    SmartStepping1a.ECL):</para>

    <programlisting>IMPORT $; 
IDX := $.DeclareData.IDX__Person_State_City_Zip_LastName_FirstName_Payload;
Filter := IDX.State = 'LA' AND IDX.City = 'ABBEVILLE';
OUTPUT(CHOOSEN(SORT(IDX(Filter),FirstName),5));     //the old way
OUTPUT(CHOOSEN(STEPPED(IDX(Filter),FirstName),5));  //Smart Stepping </programlisting>

    <para>Após executar esse código, verifique as medidas de tempo na página
    do ECL Watch. Você deve ver novamente uma grande diferença de desempenho
    entre os dois métodos, mesmo com uma pequena quantidade de dados.</para>
  </sect2>

  <sect2 id="N-ary_JOINs">
    <title>N-ary JOINs</title>

    <para>A finalidade principal do Escalonamento inteligente é possibilitar
    que operações de fusão/junção com variação <emphasis>n</emphasis> sejam
    realizadas do modo mais eficiente possível. Para isso, o conceito de um
    grupo de datasets (ou índices) foi adicionado à linguagem. Isso permite
    que JOIN seja estendida para operar em múltiplos datasets, e não apenas
    dois.</para>

    <para>Por exemplo, nestes dados (contidos no arquivo
    SmartStepping2.ECL)</para>

    <programlisting>Rec := RECORD,MAXLENGTH(4096)
  STRING1 Letter;
  UNSIGNED1 DS;
  UNSIGNED1 Matches := 1;
  UNSIGNED1 LastMatch := 1;
  SET OF UNSIGNED1 MatchDSs := [1];
END;
     
ds1 := DATASET([{'A',1},{'B',1},{'C',1},{'D',1},{'E',1}],Rec);
ds2 := DATASET([{'A',2},{'B',2},{'H',2},{'I',2},{'J',2}],Rec);
ds3 := DATASET([{'B',3},{'C',3},{'M',3},{'N',3},{'O',3}],Rec);
ds4 := DATASET([{'A',4},{'B',4},{'R',4},{'S',4},{'T',4}],Rec);
ds5 := DATASET([{'B',5},{'V',5},{'W',5},{'X',5},{'Y',5}],Rec); </programlisting>

    <para>Para realizar uma junção interna de todos os cinco datasets usando o
    Escalonamento inteligente, o código é esse (também contido no arquivo
    SmartStepping2.ECL):</para>

    <programlisting>SetDS := [ds1,ds2,ds3,ds4,ds5];

Rec XF(Rec L,DATASET(Rec) Matches) := TRANSFORM
  SELF.Matches := COUNT(Matches);
  SELF.LastMatch := MAX(Matches,DS);
  SELF.MatchDSs := SET(Matches,DS);
  SELF := L;
END;
j1 := JOIN( SetDS,STEPPED(LEFT.Letter=RIGHT.Letter),XF(LEFT,ROWS(LEFT)),SORTED(Letter));

O1 := OUTPUT(j1);
</programlisting>

    <para>Sem usar o Escalonamento inteligente, o código é esse (também
    contido no arquivo SmartStepping2.ECL):</para>

    <programlisting>Rec XF1(Rec L,Rec R,integer MatchSet) := TRANSFORM
  SELF.Matches := L.Matches + 1;
  SELF.LastMatch := MatchSet;
  SELF.MatchDSs := L.MatchDSs + [MatchSet];
  SELF := L;
END;
j2 := JOIN( ds1,ds2,LEFT.Letter=RIGHT.Letter,XF1(LEFT,RIGHT,2));
j3 := JOIN( j2,ds3, LEFT.Letter=RIGHT.Letter,XF1(LEFT,RIGHT,3));
j4 := JOIN( j3,ds4, LEFT.Letter=RIGHT.Letter,XF1(LEFT,RIGHT,4));
j5 := JOIN( j4,ds5, LEFT.Letter=RIGHT.Letter,XF1(LEFT,RIGHT,5));
O2 := OUTPUT(SORT(j5,Letter));
</programlisting>

    <para>Ambos os exemplos produzem o mesmo resultado de um registro, mas,
    sem o Escalonamento inteligente, são necessárias quatro operações
    separadas de JOINs para alcançar o objetivo e, no código "real", você pode
    precisar de uma TRANSFORM separada para cada, dependendo do resultado
    buscado.</para>

    <para>Além da junção interna padrão entre todos os datasets, a forma
    Escalonamento inteligente de JOIN também é compatível com o mesmo tipo de
    junções LEFT OUTER e LEFT ONLY que a operação padrão de JOIN. No entanto,
    esta forma também é compatível com as junções <emphasis>M</emphasis> de
    <emphasis>N</emphasis> (MOFN), onde os registros correspondentes precisam
    aparecer em um número mínimo especificado de datasets, e pode
    opcionalmente especificar um máximo onde eles apareçam, como nestes
    exemplos (também contidos no arquivo SmartStepping2.ECL ):</para>

    <programlisting>j6 := JOIN( SetDS,
            STEPPED(LEFT.Letter=RIGHT.Letter),
            XF(LEFT,ROWS(LEFT)),
            SORTED(Letter),
            LEFT OUTER);
j7 := JOIN( SetDS,
            STEPPED(LEFT.Letter=RIGHT.Letter),
            XF(LEFT,ROWS(LEFT)),
            SORTED(Letter),
            LEFT ONLY);
j8 := JOIN( SetDS,
            STEPPED(LEFT.Letter=RIGHT.Letter),
            XF(LEFT,ROWS(LEFT)),
            SORTED(Letter),
            MOFN(3));
j9 := JOIN( SetDS,
            STEPPED(LEFT.Letter=RIGHT.Letter),
            XF(LEFT,ROWS(LEFT)),
            SORTED(Letter),
            MOFN(3,4));
O3 := OUTPUT(j6);
O4 := OUTPUT(j7);
O5 := OUTPUT(j8);
O6 := OUTPUT(j9);
</programlisting>

    <para>A função RANGE também está disponível para limitar quais datastes no
    grupo de datasets serão processados, como neste exemplo (também contido no
    aruqivo SmartStepping2.ECL ):</para>

    <programlisting>j10 := JOIN( RANGE(SetDS,[1,3,5]),
             STEPPED(LEFT.Letter=RIGHT.Letter),
             XF(LEFT,ROWS(LEFT)),
             SORTED(Letter));
O7 := OUTPUT(j10);

SEQUENTIAL(O1,O2,O3,O4,O5,O6,O7);</programlisting>

    <para>Este recurso pode ser útil em situações nas quais você possa não ter
    todas as informações para a seleção de todos os datasets no grupo.</para>

    <para>O próximo exemplo demonstra o uso mais provável para essa tecnologia
    em um ambiente real – localizar o grupo de registros principais onde os
    registros secundários relacionados existem de forma a combinar com um
    grupo de critérios de filtro especificados. É exatamente o que esse
    exemplo (contido no arquivo SmartStepping3.ECL) faz:</para>

    <programlisting>LinkRec := RECORD
 UNSIGNED1 Link;
END;
DS_Rec := RECORD(LinkRec)
  STRING10 Name;
  STRING10 Address;
END;
Child1_Rec := RECORD(LinkRec)
  UNSIGNED1 Nbr;
END;
Child2_Rec := RECORD(LinkRec)
  STRING10 Car;
END;
Child3_Rec := RECORD(LinkRec)
  UNSIGNED4 Salary;
END;
Child4_Rec := RECORD(LinkRec)
  STRING1</programlisting>

    <para>Usar essa forma de herança de estrutura de RECORD simplifica
    bastante a definição da conexão entre os arquivos principal e secundário.
    Observe que todos esses arquivos possuem formatos diferentes.</para>

    <programlisting>ds := DATASET([{1,'Fred','123 Main'},{2,'George','456 High'},
               {3,'Charlie','789 Bank'},{4,'Danielle','246 Front'},
               {5,'Emily','613 Boca'},{6,'Oscar','942 Frank'},
               {7,'Felix','777 John'},{8,'Adele','543 Bank'},
               {9,'Johan','123 Front'},{10,'Ludwig','212 Front'}],
              DS_Rec);
     
Child1 := DATASET([{1,5},{2,8},{3,11},{4,14},{5,17},
                   {6,20},{7,23},{8,26},{9,29},{10,32}],Child1_Rec);

Child2 := DATASET([{1,'Ford'},{2,'Ford'},{3,'Chevy'},
                   {4,'Lexus'},{5,'Lexus'},{6,'Kia'},
                   {7,'Mercury'},{8,'Jeep'},{9,'Lexus'},
                   {9,'Ferrari'},{10,'Ford'}],
                  Child2_Rec);
     

Child3 := DATASET([{1,10000},{2,20000},{3,155000},{4,800000},
                   {5,250000},{6,75000},{7,200000},{8,15000},
                   {9,80000},{10,25000}],
                  Child3_Rec);
     
Child4 := DATASET([{1,'House'},{2,'House'},{3,'House'},{4,'Apt'},
                   {5,'Apt'},{6,'Apt'},{7,'Apt'},{8,'House'},
                   {9,'Apt'},{10,'House'}],
                  Child4_Rec);
     
TblRec := RECORD(LinkRec),MAXLENGTH(4096)
  UNSIGNED1 DS;
  UNSIGNED1 Matches := 0;
  UNSIGNED1 LastMatch := 0;
  SET OF UNSIGNED1 MatchDSs := [];
END;
     
Filter1 := Child1.Nbr % 2 = 0;
Filter2 := Child2.Car IN ['Ford','Chevy','Jeep'];
Filter3 := Child3.Salary &lt; 100000;
Filter4 := Child4.Domicile = 'House';
     
t1 := PROJECT(Child1(Filter1),TRANSFORM(TblRec,SELF.DS:=1,SELF:=LEFT));
t2 := PROJECT(Child2(Filter2),TRANSFORM(TblRec,SELF.DS:=2,SELF:=LEFT));
t3 := PROJECT(Child3(Filter3),TRANSFORM(TblRec,SELF.DS:=3,SELF:=LEFT));
t4 := PROJECT(Child4(Filter4),TRANSFORM(TblRec,SELF.DS:=4,SELF:=LEFT));</programlisting>

    <para>A operação PROJECT é uma maneira simples de transformar os
    resultados para todos esses arquivos de formatos diferentes em um layout
    de padrão único que pode ser usado pela operação de Escalonamento
    inteligente JOIN.</para>

    <programlisting>SetDS := [t1,t2,t3,t4];
     
TblRec XF(TblRec L,DATASET(TblRec) Matches) := TRANSFORM
  SELF.Matches := COUNT(Matches);
  SELF.LastMatch := MAX(Matches,DS);
  SELF.MatchDSs := SET(Matches,DS);
  SELF := L;
END;

j1 := JOIN( SetDS,STEPPED(LEFT.Link=RIGHT.Link),XF(LEFT,ROWS(LEFT)),SORTED(Link));     

OUTPUT(j1);
     
OUTPUT(ds(link IN SET(j1,link)));</programlisting>

    <para>O primeiro OUTPUT exibe apenas o mesmo tipo de resultado que o
    exemplo anterior. O segundo OUTPUT produz um grupo de resultados "real"
    dos registros de dataset de base que correspondem aos critérios de filtro
    para cada um dos datasets secundários.</para>
  </sect2>
</sect1>
