<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="Crypto">
  <title><emphasis>Cryptography Support</emphasis></title>

  <para>This section provides support to perform cryptographic functions on
  data in ECL.</para>

  <sect1>
    <title>Cryptographic Library Overview</title>

    <para>There are three classes of Cryptographic Algorithms in the
    Cryptography library: Hashing functions, Symmetric-Key Algorithms, and
    Asymmetric-Key Algorithms.</para>

    <para><emphasis role="bold">Hashing Functions</emphasis>:</para>

    <itemizedlist>
      <listitem>
        <para>Useful to verify data integrity</para>
      </listitem>

      <listitem>
        <para>Transforms large random sized data to small fixed size</para>
      </listitem>

      <listitem>
        <para>Impossible to reverse a hash back to its original data
        (one-way)</para>
      </listitem>

      <listitem>
        <para>Fast</para>
      </listitem>
    </itemizedlist>

    <para>See Also: <link
    linkend="SupportedHashAlgorithms">SupportedHashAlgorithms</link></para>

    <para><emphasis role="bold">Symmetric-Key Algorithms:</emphasis></para>

    <itemizedlist>
      <listitem>
        <para>Uses a single shared key to Encrypt/Decrypt data</para>
      </listitem>

      <listitem>
        <para>Supports Block algorithms</para>
      </listitem>

      <listitem>
        <para>Fast</para>
      </listitem>
    </itemizedlist>

    <para>See Also: <link
    linkend="SupportedSymmetricCipherAlgorithms">SupportedSymmetricCipherAlgorithms</link></para>

    <para><emphasis role="bold">Asymmetric-Key Algorithms </emphasis>(Also
    known as Public-Key or PKI Algorithms):</para>

    <itemizedlist>
      <listitem>
        <para>Mathematically associated Public and Private Key Pair</para>
      </listitem>

      <listitem>
        <para>Used to Encrypt/Decrypt data</para>
      </listitem>

      <listitem>
        <para>Used to create Digital Signatures</para>
      </listitem>

      <listitem>
        <para>Comparatively slower</para>
      </listitem>
    </itemizedlist>

    <para>See Also: <link
    linkend="SupportedPublicKeyAlgorithms">SupportedPublicKeyAlgorithms</link></para>
  </sect1>

  <sect1 id="SupportedHashAlgorithms">
    <title>SupportedHashAlgorithms</title>

    <para><emphasis role="bold">STD.Crypto.SupportedHashAlgorithms<indexterm>
        <primary>STD.Crypto.SupportedHashAlgorithms</primary>
      </indexterm><indexterm>
        <primary>Crypto.SupportedHashAlgorithms</primary>
      </indexterm><indexterm>
        <primary>SupportedHashAlgorithms</primary>
      </indexterm>(</emphasis>
    <emphasis></emphasis><emphasis>);</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>SET OF STRINGs containing all supported Hash
            Algorithms</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <emphasis role="bold">SupportedHashAlgorithms
    </emphasis>function returns the set of supported Hash Algorithms</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;
STD.Crypto.SupportedHashAlgorithms(); //returns SET of STRINGs</programlisting>

    <para></para>
  </sect1>

  <sect1 id="SupportedSymmetricCipherAlgorithms">
    <title>SupportedSymmetricCipherAlgorithms</title>

    <para><emphasis
    role="bold">STD.Crypto.SupportedSymmetricCipherAlgorithms<indexterm>
        <primary>STD.Crypto.</primary>
      </indexterm><indexterm>
        <primary>Crypto.SupportedSymmetricCipherAlgorithms</primary>
      </indexterm>(</emphasis>
    <emphasis></emphasis><emphasis>);</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>SET OF STRINGs containing all supported Cipher
            Algorithms</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <emphasis role="bold">SupportedSymmetricCipherAlgorithms
    </emphasis>function returns the set of supported Cipher Algorithms</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;
STD.Crypto.SupportedSymmetricCipherAlgorithms(); //returns SET of STRINGs</programlisting>

    <para></para>
  </sect1>

  <sect1 id="SupportedPublicKeyAlgorithms">
    <title>SupportedPublicKeyAlgorithms</title>

    <para><emphasis
    role="bold">STD.Crypto.SupportedPublicKeyAlgorithms<indexterm>
        <primary>STD.Crypto.SupportedPublicKeyAlgorithms</primary>
      </indexterm><indexterm>
        <primary>Crypto.SupportedPublicKeyAlgorithms</primary>
      </indexterm><indexterm>
        <primary>SupportedPublicKeyAlgorithms</primary>
      </indexterm>(</emphasis>
    <emphasis></emphasis><emphasis>);</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>SET OF STRINGs containing all supported Public Key
            Algorithms</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The <emphasis role="bold">SupportedPublicKeyAlgorithms
    </emphasis>function returns the set of supported Public Key
    Algorithms</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;
STD.Crypto.SupportedPublicKeyAlgorithms(); //returns SET of STRINGs</programlisting>

    <para></para>
  </sect1>

  <sect1 id="hashing">
    <title>Hashing Module</title>

    <para><emphasis>myHashModule</emphasis> :=<emphasis role="bold">
    STD.Crypto.Hashing(</emphasis><emphasis>hashAlgorithm</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Hashing</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myHashModule</emphasis></entry>

            <entry>The name of the Hashing module structure</entry>
          </row>

          <row>
            <entry><emphasis>hashAlgorithm</emphasis></entry>

            <entry>The hashing algorithm to use, as returned by <link
            linkend="SupportedHashAlgorithms">SupportedHashAlgorithms()</link></entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>A Hashing module is defined in ECL. Subsequent function definitions
    use the module definitions specified in the Hashing module
    definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">Import STD;

//Hashing module definition
myHashModuleSha512 := Std.Crypto.Hashing('sha512'); 
myHashModuleSha256 := Std.Crypto.Hashing('sha256'); 

DATA hash1 := myHashModuleSha512.Hash((DATA)'The quick brown fox jumps over the lazy dog');
DATA hash2 := myHashModuleSha256.Hash((DATA)'The quick brown fox jumps over the lazy dog');

OUTPUT(hash1);
OUTPUT(hash2);</programlisting>
  </sect1>

  <sect1 id="hash_crypto">
    <title>Hash</title>

    <para><emphasis>myHashModule</emphasis><emphasis
    role="bold">.Hash(</emphasis><emphasis>inputData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Hash</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myHashModule</emphasis></entry>

            <entry>The name of the Hashing module structure</entry>
          </row>

          <row>
            <entry><emphasis>inputData</emphasis></entry>

            <entry>The data to hash in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>Hashed contents in DATA format</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Hash function creates a hash of the given
    <emphasis>inputData</emphasis>, using the hash algorithm defined in the
    Hashing module.</para>

    <para>Example:</para>

    <programlisting format="linespecific">Import STD;

//Hashing module definition
myHashModuleSha512 := Std.Crypto.Hashing('sha512'); 
myHashModuleSha256 := Std.Crypto.Hashing('sha256'); 

DATA hash1 := myHashModuleSha512.Hash((DATA)'The quick brown fox jumps over the lazy dog');
DATA hash2 := myHashModuleSha256.Hash((DATA)'The quick brown fox jumps over the lazy dog');

OUTPUT(hash1);
OUTPUT(hash2);</programlisting>

    <para></para>
  </sect1>

  <sect1 id="SymmetricEncryptionModule">
    <title>SymmetricEncryption Module</title>

    <para><emphasis>mySymEncModule</emphasis> :=<emphasis role="bold">
    STD.Crypto.SymmetricEncryption(</emphasis><emphasis>algorithm,
    passphrase)<indexterm>
        <primary>SymmetricEncryption</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>mySymEncModule</emphasis></entry>

            <entry>The name of the Symmetric Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>algorithm</emphasis></entry>

            <entry>The algorithm to use, as returned by <link
            linkend="SupportedSymmetricCipherAlgorithms">SupportedSymmetricCipherAlgorithms()</link></entry>
          </row>

          <row>
            <entry><emphasis>passphrase</emphasis></entry>

            <entry>The passphrase to use for encryption/decryption</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>A Symmetric Encryption module is defined in ECL. Subsequent function
    definitions use the options specified in the Symmetric Encryption module
    definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;

//Symmetric Encryption module definition
mySymEncModule := Std.Crypto.SymmetricEncryption('aes-256-cbc',
                                                 '12345678901234567890123456789012'); 

//encrypt/decrypt string literals
STRING myStr := 'The quick brown fox jumps over the lazy dog';
DATA   encryptedStr := mySymEncModule.Encrypt((DATA)myStr);
STRING decryptedStr := (STRING)mySymEncModule.Decrypt(encryptedStr) ;

OUTPUT(myStr); 
OUTPUT(decryptedStr);</programlisting>

    <para></para>
  </sect1>

  <sect1 id="EncryptSymmetric">
    <title>Encrypt (Symmetric)</title>

    <para><emphasis>mySymEncModule</emphasis><emphasis
    role="bold">.Encrypt(</emphasis><emphasis>inputData</emphasis><emphasis
    role="bold">)</emphasis><indexterm>
        <primary>Encrypt</primary>
      </indexterm>;</para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>mySymEncModule</emphasis></entry>

            <entry>The name of the Symmetric Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>inputData</emphasis></entry>

            <entry>The data to encrypt in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>Encrypted contents in DATA format</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Encrypt function encrypts the given
    <emphasis>inputData</emphasis>, using the options defined in the Symmetric
    Encryption module.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;

//Symmetric Encryption module definition
mySymEncModule := Std.Crypto.SymmetricEncryption('aes-256-cbc',
                                                 '12345678901234567890123456789012'); 

//encrypt/decrypt string literals
STRING myStr := 'The quick brown fox jumps over the lazy dog';
DATA   encryptedStr := mySymEncModule.Encrypt((DATA)myStr);
STRING decryptedStr := (STRING)mySymEncModule.Decrypt(encryptedStr) ;

OUTPUT(myStr); 
OUTPUT(decryptedStr);</programlisting>

    <para></para>
  </sect1>

  <sect1 id="DecryptSymmetric">
    <title>Decrypt (Symmetric)</title>

    <para><emphasis>mySymEncModule</emphasis><emphasis
    role="bold">.Decrypt(</emphasis><emphasis>encryptedData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Decrypt</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>mySymEncModule</emphasis></entry>

            <entry>The name of the Symmetric Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>encryptedData</emphasis></entry>

            <entry>The data to decrypt in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>Decrypted contents in DATA format</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Decrypt function decrypts the given
    <emphasis>encryptedData</emphasis> using the options defined in the
    Symmetric Encryption module. You can only decrypt data that was encrypted
    by the Standard Library's Encrypt method. </para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;

//Symmetric Encryption module definition
mySymEncModule := Std.Crypto.SymmetricEncryption('aes-256-cbc',
                                                 '12345678901234567890123456789012'); 

//encrypt/decrypt string literals
STRING myStr := 'The quick brown fox jumps over the lazy dog';
DATA   encryptedStr := mySymEncModule.Encrypt((DATA)myStr);
STRING decryptedStr := (STRING)mySymEncModule.Decrypt(encryptedStr) ;

OUTPUT(myStr); 
OUTPUT(decryptedStr);</programlisting>

    <para></para>
  </sect1>

  <sect1 id="PublicKeyEncryptionModule">
    <title>PublicKeyEncryption Module</title>

    <para><emphasis>myPKEModule</emphasis> :=<emphasis role="bold">
    STD.Crypto.PublicKeyEncryption(</emphasis><emphasis>pkAlgorithm,
    publicKeyFile, privateKeyFile, passphrase)<indexterm>
        <primary>PublicKeyEncryption</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>pkAlgorithm</emphasis></entry>

            <entry>The algorithm to use, as returned by <link
            linkend="SupportedPublicKeyAlgorithms">SupportedPublicKeyAlgorithms()</link></entry>
          </row>

          <row>
            <entry><emphasis>publicKeyFile</emphasis></entry>

            <entry>The File Specification of the PEM formatted Public Key
            file</entry>
          </row>

          <row>
            <entry><emphasis>privateKeyFile</emphasis></entry>

            <entry>The File Specification of the PEM formatted Private Key
            file</entry>
          </row>

          <row>
            <entry><emphasis>passphrase</emphasis></entry>

            <entry>The passphrase to use for encryption, decryption, signing,
            verifying</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>A Public Key Encryption module is defined in ECL. Subsequent
    function definitions use the options defined in the Public Key Encryption
    module to perform asymmetric encryption/decryption/digital
    signing/signature verification.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;
privKeyFile := '/var/lib/HPCCSystems/myesp/test.key';
pubKeyFile :=  '/var/lib/HPCCSystems/myesp/test.key.pub';

//PKE Encryption module definition
myPKEModule := STD.Crypto.PublicKeyEncryption('RSA', pubKeyFile, privKeyFile,''); 

DATA encrypted := myPKEModule.Encrypt((DATA)'The quick brown fox jumps over the lazy dog');

OUTPUT( (STRING)myPKEModule.Decrypt(encrypted) );
</programlisting>

    <para></para>
  </sect1>

  <sect1 id="EncryptPublicKeyEncryption">
    <title>Encrypt (PKE)</title>

    <para><emphasis>myPKEModule</emphasis><emphasis
    role="bold">.Encrypt(</emphasis><emphasis>inputData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Encrypt</primary>
      </indexterm>;</emphasis></para>

    <para><informaltable colsep="1" frame="all" rowsep="1">
        <tgroup cols="2">
          <colspec colwidth="120.50pt" />

          <colspec />

          <tbody>
            <row>
              <entry><emphasis>myPKEModule</emphasis></entry>

              <entry>The name of the Public Key Encryption module
              structure</entry>
            </row>

            <row>
              <entry><emphasis>inputData</emphasis></entry>

              <entry>The data to encrypt in DATA format</entry>
            </row>

            <row>
              <entry>Return:<emphasis></emphasis></entry>

              <entry>Encrypted contents in DATA format</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable>The Encrypt function encrypts the given
    <emphasis>inputData</emphasis> using the options specified in the Public
    Key Encryption module definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;
privKeyFile := '/var/lib/HPCCSystems/myesp/test.key';
pubKeyFile :=  '/var/lib/HPCCSystems/myesp/test.key.pub';

//PKE Encryption module definition
myPKEModule := STD.Crypto.PublicKeyEncryption('RSA', pubKeyFile, privKeyFile,''); 

DATA encrypted := myPKEModule.Encrypt((DATA)'The quick brown fox jumps over the lazy dog');

OUTPUT( (STRING)myPKEModule.Decrypt(encrypted) );
</programlisting>

    <para></para>
  </sect1>

  <sect1 id="DecryptPublicKeyEncryption">
    <title>Decrypt (PKE)</title>

    <para><emphasis>myPKEModule</emphasis><emphasis
    role="bold">.Decrypt(</emphasis><emphasis>encryptedData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Decrypt</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>encryptedData</emphasis></entry>

            <entry>The data to decrypt in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>Decrypted contents in DATA format</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Decrypt function decrypts the given
    <emphasis>encryptedData</emphasis>, using the options specified in the
    Public Key Encryption module definition. You can only decrypt data that
    was encrypted by the Standard Library's Encrypt method. </para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;
privKeyFile := '/var/lib/HPCCSystems/myesp/test.key';
pubKeyFile :=  '/var/lib/HPCCSystems/myesp/test.key.pub';

//PKE Encryption module definition
myPKEModule := STD.Crypto.PublicKeyEncryption('RSA', pubKeyFile, privKeyFile,''); 

DATA encrypted := myPKEModule.Encrypt((DATA)'The quick brown fox jumps over the lazy dog');

OUTPUT( (STRING)myPKEModule.Decrypt(encrypted) );
</programlisting>
  </sect1>

  <sect1 id="SignPublicKeyEncryption">
    <title>Sign (PKE)</title>

    <para><emphasis>mySymEncModule</emphasis><emphasis
    role="bold">.Sign(</emphasis><emphasis>encryptedData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Sign</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>inputData</emphasis></entry>

            <entry>The data to sign in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>Computed Digital signature</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Sign function creates a digital signature of the given
    <emphasis>inputData</emphasis>, using the options specified in the Public
    Key Encryption module definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;
privKeyFile := '/var/lib/HPCCSystems/myesp/test.key';
pubKeyFile :=  '/var/lib/HPCCSystems/myesp/test.key.pub';

//PKE Encryption module definition
myPKEModule := STD.Crypto.PublicKeyEncryption('RSA', pubKeyFile, privKeyFile,''); 

DATA signature := myPKEModule.Sign((DATA)'The quick brown fox jumps');
OUTPUT(TRUE = myPKEModule.VerifySignature(signature, (DATA)'The quick brown fox jumps'));</programlisting>

    <para></para>
  </sect1>

  <sect1 id="VerifySignaturePublicKeyEncryption">
    <title>VerifySignature (PKE)</title>

    <para><emphasis>myPKEModule</emphasis><emphasis
    role="bold">.VerifySignature(</emphasis><emphasis>signature,
    signedData</emphasis><emphasis role="bold">)<indexterm>
        <primary>VerifySignature</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>signature</emphasis></entry>

            <entry>The Digital signature to verify</entry>
          </row>

          <row>
            <entry><emphasis>signedData</emphasis></entry>

            <entry>Data used to create the signature in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>A BOOLEAN value to indicate verification</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The VerifySignature function verifies the given digital
    <emphasis>signature</emphasis> using the options specified in the Public
    Key Encryption module definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;
privKeyFile := '/var/lib/HPCCSystems/myesp/test.key';
pubKeyFile :=  '/var/lib/HPCCSystems/myesp/test.key.pub';

//PKE Encryption module definition
myPKEModule := STD.Crypto.PublicKeyEncryption('RSA', pubKeyFile, privKeyFile,''); 

DATA signature := myPKEModule.Sign((DATA)'The quick brown fox jumps');
OUTPUT(TRUE = myPKEModule.VerifySignature(signature, (DATA)'The quick brown fox jumps')); </programlisting>

    <para></para>
  </sect1>

  <sect1 id="PublicKeyEncryptionFromBufferModule">
    <title>PublicKeyEncryptionFromBuffer Module</title>

    <para><emphasis>myPKEModule</emphasis> :=<emphasis role="bold">
    STD.Crypto.PublicKeyEncryptionFromBuffer(</emphasis><emphasis>pkAlgorithm,
    publicKeyFile, privateKeyFile, passphrase)<indexterm>
        <primary>PublicKeyEncryption</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption From Buffer module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>pkAlgorithm</emphasis></entry>

            <entry>The algorithm to use, as returned by <link
            linkend="SupportedPublicKeyAlgorithms">SupportedPublicKeyAlgorithms()</link></entry>
          </row>

          <row>
            <entry><emphasis>publicKeyBuff</emphasis></entry>

            <entry>PEM formatted Public Key buffer</entry>
          </row>

          <row>
            <entry><emphasis>privateKeyBuff</emphasis></entry>

            <entry>PEM formatted Private Key buffer</entry>
          </row>

          <row>
            <entry><emphasis>passphrase</emphasis></entry>

            <entry>The passphrase to use for encryption, decryption, signing,
            verifying</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>A Public Key Encryption From Buffer module is defined in ECL.
    Subsequent function definitions use the options defined in the Public Key
    Encryption From Buffer module to perform asymmetric
    encryption/decryption/digital signing/signature verification.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;

STRING publicKey := '-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----';

STRING privateKey := '-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----';

//PKE Encryption module definition
MyPKEModule := STD.Crypto.PublicKeyEncryptionFromBuffer('RSA', PublicKey, PrivateKey, '');

DATA encrypted := MyPKEModule.Encrypt((DATA)'The quick brown fox jumps over the lazy dog');
OUTPUT( (STRING)MyPKEModule.Decrypt(encrypted));
</programlisting>

    <para></para>
  </sect1>

  <sect1 id="EncryptPublicKeyEncryptionFromBuffer">
    <title>Encrypt (PKE From Buffer)</title>

    <para><emphasis>myPKEModule</emphasis><emphasis
    role="bold">.Encrypt(</emphasis><emphasis>inputData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Encrypt</primary>
      </indexterm>;</emphasis></para>

    <para><informaltable colsep="1" frame="all" rowsep="1">
        <tgroup cols="2">
          <colspec colwidth="120.50pt" />

          <colspec />

          <tbody>
            <row>
              <entry><emphasis>myPKEModule</emphasis></entry>

              <entry>The name of the Public Key Encryption module
              structure</entry>
            </row>

            <row>
              <entry><emphasis>inputData</emphasis></entry>

              <entry>The data to encrypt in DATA format</entry>
            </row>

            <row>
              <entry>Return:<emphasis></emphasis></entry>

              <entry>Encrypted contents in DATA format</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <para>The Encrypt function encrypts the given
    <emphasis>inputData</emphasis>, using the options specified in the Public
    Key Encryption From Buffer module definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;

STRING publicKey := '-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----';

STRING privateKey := '-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----';

//PKE Encryption module definition
MyPKEModule := STD.Crypto.PublicKeyEncryptionFromBuffer('RSA', PublicKey, PrivateKey, '');

DATA encrypted := MyPKEModule.Encrypt((DATA)'The quick brown fox jumps over the lazy dog');
OUTPUT( (STRING)MyPKEModule.Decrypt(encrypted));</programlisting>

    <para></para>
  </sect1>

  <sect1 id="DecryptPublicKeyEncryptionFromBuffer">
    <title>Decrypt (PKE From Buffer)</title>

    <para><emphasis>myPKEModule</emphasis><emphasis
    role="bold">.Decrypt(</emphasis><emphasis>encryptedData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Decrypt</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>encryptedData</emphasis></entry>

            <entry>The data to decrypt in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>Decrypted contents in DATA format</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Decrypt function decrypts the given
    <emphasis>encryptedData</emphasis>, using the options specified in the
    Public Key Encryption From Buffer module definition. You can only decrypt
    data that was encrypted by the Standard Library's Encrypt method. </para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;

STRING publicKey := '-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----';

STRING privateKey := '-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----';

//PKE Encryption module definition
MyPKEModule := STD.Crypto.PublicKeyEncryptionFromBuffer('RSA', PublicKey, PrivateKey, '');

DATA encrypted := MyPKEModule.Encrypt((DATA)'The quick brown fox jumps over the lazy dog');
OUTPUT( (STRING)MyPKEModule.Decrypt(encrypted));</programlisting>
  </sect1>

  <sect1 id="SignPublicKeyEncryptionFromBuffer">
    <title>Sign (PKE From Buffer)</title>

    <para><emphasis>mySymEncModule</emphasis><emphasis
    role="bold">.Sign(</emphasis><emphasis>encryptedData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Sign</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>inputData</emphasis></entry>

            <entry>The data to sign in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>Computed Digital signature in DATA format</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Sign function creates a digital signature of the given
    <emphasis>inputData</emphasis>, using the options specified in the Public
    Key Encryption From Buffer module definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;

STRING publicKey := '-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----';

STRING privateKey := '-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----';

//PKE Encryption module definition
myPKEModule := STD.Crypto.PublicKeyEncryptionFromBuffer('RSA', publicKey, privateKey,''); 

DATA signature := myPKEModule.Sign((DATA)'The quick brown fox jumps');
OUTPUT(TRUE = myPKEModule.VerifySignature(signature, (DATA)'The quick brown fox jumps'));</programlisting>
  </sect1>

  <sect1 id="VerifySignaturePublicKeyEncryptionFromBuffer">
    <title>VerifySignature (PKE From Buffer)</title>

    <para><emphasis>myPKEModule</emphasis><emphasis
    role="bold">.VerifySignature(</emphasis><emphasis>signature,
    signedData</emphasis><emphasis role="bold">)<indexterm>
        <primary>VerifySignature</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption module
            structure</entry>
          </row>

          <row>
            <entry><emphasis>signature</emphasis></entry>

            <entry>The Digital signature to verify</entry>
          </row>

          <row>
            <entry><emphasis>signedData</emphasis></entry>

            <entry>Data used to create the signature in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>A BOOLEAN value to indicate verification</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The VerifySignature function verifies the given digital
    <emphasis>signature</emphasis> using the options specified in the Public
    Key Encryption From Buffer module definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT STD;

STRING publicKey := '-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----';

STRING privateKey := '-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----';

//PKE Encryption module definition
myPKEModule := STD.Crypto.PublicKeyEncryptionFromBuffer('RSA', publicKey, privateKey,''); 

DATA signature := myPKEModule.Sign((DATA)'The quick brown fox jumps');
OUTPUT(TRUE = myPKEModule.VerifySignature(signature, (DATA)'The quick brown fox jumps'));</programlisting>
  </sect1>

  <sect1 id="PublicKeyEncryptionFromLFNModule">
    <title>PublicKeyEncryptionFromLFN Module</title>

    <para><emphasis>myPKEModule</emphasis> :=<emphasis role="bold">
    STD.Crypto.PublicKeyEncryptionFromLFN(</emphasis><emphasis>pkAlgorithm,
    publicKeyFile, privateKeyFile, passphrase)<indexterm>
        <primary>PublicKeyEncryption</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption From LFN (Logical
            FileName) module structure</entry>
          </row>

          <row>
            <entry><emphasis>pkAlgorithm</emphasis></entry>

            <entry>The algorithm to use, as returned by <link
            linkend="SupportedPublicKeyAlgorithms">SupportedPublicKeyAlgorithms()</link></entry>
          </row>

          <row>
            <entry><emphasis>publicKeyLFN</emphasis></entry>

            <entry>PEM formatted Public Key logical file</entry>
          </row>

          <row>
            <entry><emphasis>privateKeyLFN</emphasis></entry>

            <entry>PEM formatted Private Key logical file</entry>
          </row>

          <row>
            <entry><emphasis>passphrase</emphasis></entry>

            <entry>The passphrase to use for encryption, decryption, signing,
            verifying</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>A Public Key Encryption From LFN module is defined in ECL.
    Subsequent function definitions use the options defined in the Public Key
    Encryption From LFN module to perform asymmetric
    encryption/decryption/digital signing/signature verification.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT Std;

PublicKeyFile := '~Examples::certificates::public::pubkey.pem'; 
PrivateKeyFile:= '~Examples::certificates::private::privkey.pem'; 
       //You can restrict access using file scope security
       //on the ~Examples::certificates::private scope  

pubKey :=  RECORD
  STRING  Key;
END;

dPubKey :=  DATASET([{
'-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----' + '\n'
}],pubKey);

OUTPUT(dPubKey,,PublicKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

PrivKey :=  RECORD
  STRING  Key;
END;
dPrivKey :=  DATASET([{
'-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----' + '\n'
}],PrivKey);

OUTPUT(dPrivKey,,PrivateKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

//PKE Encryption module definition
MyPKEModule := STD.Crypto.PublicKeyEncryptionFromLFN('RSA', PublicKeyFile, PrivateKeyFile, '');

DATA encrypted := MyPKEModule.Encrypt((DATA)'The quick brown fox jumps over the lazy dog');
OUTPUT( (STRING)MyPKEModule.Decrypt(encrypted));
</programlisting>

    <para></para>
  </sect1>

  <sect1 id="EncryptPublicKeyEncryptionFromLFN">
    <title>Encrypt (PKE From LFN)</title>

    <para><emphasis>myPKEModule</emphasis><emphasis
    role="bold">.Encrypt(</emphasis><emphasis>inputData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Encrypt</primary>
      </indexterm>;</emphasis></para>

    <para><informaltable colsep="1" frame="all" rowsep="1">
        <tgroup cols="2">
          <colspec colwidth="120.50pt" />

          <colspec />

          <tbody>
            <row>
              <entry><emphasis>myPKEModule</emphasis></entry>

              <entry>The name of the Public Key Encryption From LFN (Logical
              FileName) module structure</entry>
            </row>

            <row>
              <entry><emphasis>inputData</emphasis></entry>

              <entry>The data to encrypt in DATA format</entry>
            </row>

            <row>
              <entry>Return:<emphasis></emphasis></entry>

              <entry>Encrypted contents in DATA format</entry>
            </row>
          </tbody>
        </tgroup>
      </informaltable></para>

    <para>The Encrypt function encrypts the given
    <emphasis>inputData</emphasis>, using the options specified in the Public
    Key Encryption From LFN module definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT Std;

PublicKeyFile := '~Examples::certificates::public::pubkey.pem'; 
PrivateKeyFile:= '~Examples::certificates::private::privkey.pem'; 
       //You can restrict access using file scope security
       //on the ~Examples::certificates::private scope  

pubKey :=  RECORD
  STRING  Key;
END;

dPubKey :=  DATASET([{
'-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----' + '\n'
}],pubKey);

OUTPUT(dPubKey,,PublicKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

PrivKey :=  RECORD
  STRING  Key;
END;
dPrivKey :=  DATASET([{
'-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----' + '\n'
}],PrivKey);

OUTPUT(dPrivKey,,PrivateKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

//PKE Encryption module definition
MyPKEModule := STD.Crypto.PublicKeyEncryptionFromLFN('RSA', PublicKeyFile, PrivateKeyFile, '');

DATA encrypted := MyPKEModule.Encrypt((DATA)'The quick brown fox jumps over the lazy dog');
OUTPUT( (STRING)MyPKEModule.Decrypt(encrypted));
</programlisting>

    <para></para>
  </sect1>

  <sect1 id="DecryptPublicKeyEncryptionFromLFN">
    <title>Decrypt (PKE From LFN)</title>

    <para><emphasis>myPKEModule</emphasis><emphasis
    role="bold">.Decrypt(</emphasis><emphasis>encryptedData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Decrypt</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption From LFN (Logical
            FileName) module structure</entry>
          </row>

          <row>
            <entry><emphasis>encryptedData</emphasis></entry>

            <entry>The data to decrypt in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>Decrypted contents in DATA format</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Decrypt function decrypts the given
    <emphasis>encryptedData</emphasis>, using the options specified in the
    Public Key Encryption From LFN module definition. You can only decrypt
    data that was encrypted by the Standard Library's Encrypt method. </para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT Std;

PublicKeyFile := '~Examples::certificates::public::pubkey.pem'; 
PrivateKeyFile:= '~Examples::certificates::private::privkey.pem'; 
       //You can restrict access using file scope security
       //on the ~Examples::certificates::private scope  

pubKey :=  RECORD
  STRING  Key;
END;

dPubKey :=  DATASET([{
'-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----' + '\n'
}],pubKey);

OUTPUT(dPubKey,,PublicKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

PrivKey :=  RECORD
  STRING  Key;
END;
dPrivKey :=  DATASET([{
'-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----' + '\n'
}],PrivKey);

OUTPUT(dPrivKey,,PrivateKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

//PKE Encryption module definition
MyPKEModule := STD.Crypto.PublicKeyEncryptionFromLFN('RSA', PublicKeyFile, PrivateKeyFile, '');

DATA encrypted := MyPKEModule.Encrypt((DATA)'The quick brown fox jumps over the lazy dog');
OUTPUT( (STRING)MyPKEModule.Decrypt(encrypted));
</programlisting>
  </sect1>

  <sect1 id="SignPublicKeyEncryptionFromLFN">
    <title>Sign (PKE From LFN)</title>

    <para><emphasis>mySymEncModule</emphasis><emphasis
    role="bold">.Sign(</emphasis><emphasis>encryptedData</emphasis><emphasis
    role="bold">)<indexterm>
        <primary>Sign</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption From LFN (Logical
            FileName) module structure</entry>
          </row>

          <row>
            <entry><emphasis>inputData</emphasis></entry>

            <entry>The data to sign in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>Computed Digital signature in DATA format</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The Sign function creates a digital signature of the given
    <emphasis>inputData</emphasis>, using the options specified in the Public
    Key Encryption From LFN module definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT Std;

PublicKeyFile := '~Examples::certificates::public::pubkey.pem'; 
PrivateKeyFile:= '~Examples::certificates::private::privkey.pem'; 
       //You can restrict access using file scope security
       //on the ~Examples::certificates::private scope  

pubKey :=  RECORD
  STRING  Key;
END;

dPubKey :=  DATASET([{
'-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----' + '\n'
}],pubKey);

OUTPUT(dPubKey,,PublicKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

PrivKey :=  RECORD
  STRING  Key;
END;
dPrivKey :=  DATASET([{
'-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----' + '\n'
}],PrivKey);

OUTPUT(dPrivKey,,PrivateKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

//PKE Encryption module definition
MyPKEModule := STD.Crypto.PublicKeyEncryptionFromLFN('RSA', PublicKeyFile, PrivateKeyFile, '');

DATA signature := myPKEModule.Sign((DATA)'The quick brown fox jumps');
OUTPUT(TRUE = myPKEModule.VerifySignature(signature, (DATA)'The quick brown fox jumps'));</programlisting>
  </sect1>

  <sect1 id="VerifySignaturePublicKeyEncryptionFromLFN">
    <title>VerifySignature (PKE From LFN)</title>

    <para><emphasis>myPKEModule</emphasis><emphasis
    role="bold">.VerifySignature(</emphasis><emphasis>signature,
    signedData</emphasis><emphasis role="bold">)<indexterm>
        <primary>VerifySignature</primary>
      </indexterm>;</emphasis></para>

    <informaltable colsep="1" frame="all" rowsep="1">
      <tgroup cols="2">
        <colspec colwidth="120.50pt" />

        <colspec />

        <tbody>
          <row>
            <entry><emphasis>myPKEModule</emphasis></entry>

            <entry>The name of the Public Key Encryption From LFN (Logical
            FileName) module structure</entry>
          </row>

          <row>
            <entry><emphasis>signature</emphasis></entry>

            <entry>The Digital signature to verify</entry>
          </row>

          <row>
            <entry><emphasis>signedData</emphasis></entry>

            <entry>Data used to create the signature in DATA format</entry>
          </row>

          <row>
            <entry>Return:<emphasis></emphasis></entry>

            <entry>A BOOLEAN value to indicate verification</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>

    <para>The VerifySignature function verifies the given digital
    <emphasis>signature</emphasis> using the options specified in the Public
    Key Encryption From LFN module definition.</para>

    <para>Example:</para>

    <programlisting format="linespecific">IMPORT Std;

PublicKeyFile := '~Examples::certificates::public::pubkey.pem'; 
PrivateKeyFile:= '~Examples::certificates::private::privkey.pem'; 
       //You can restrict access using file scope security
       //on the ~Examples::certificates::private scope  

pubKey :=  RECORD
  STRING  Key;
END;

dPubKey :=  DATASET([{
'-----BEGIN PUBLIC KEY-----' + '\n' +
'MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAr64RncTp5pV0KMnWRAof' + '\n' +
'od+3AUS/IDngT39j3Iovv9aI2N8g4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeE' + '\n' +
'BHqlMDydw9aHOQG17CB30GYsw3Lf8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoy' + '\n' +
'hIR9MexCldF+3WM/X0IX0ApSs7kuVPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv' + '\n' +
'/oKj6q7kInEIvhLiGfcm3bpTzWQ66zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3' + '\n' +
'J6Tk4NY3NySWzE/2/ZOWxZdR79XC+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0' + '\n' +
'bwIDAQAB' + '\n' +
'-----END PUBLIC KEY-----' + '\n'
}],pubKey);

OUTPUT(dPubKey,,PublicKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

PrivKey :=  RECORD
  STRING  Key;
END;
dPrivKey :=  DATASET([{
'-----BEGIN RSA PRIVATE KEY-----' + '\n' +
'MIIEowIBAAKCAQEAr64RncTp5pV0KMnWRAofod+3AUS/IDngT39j3Iovv9aI2N8g' + '\n' +
'4W5ipqhKftRESmzQ6I/TiUQcmi42soUXmCeEBHqlMDydw9aHOQG17CB30GYsw3Lf' + '\n' +
'8iZo7RC7ocQE3OcRzH0eBkOryW6X3efWnMoyhIR9MexCldF+3WM/X0IX0ApSs7ku' + '\n' +
'VPVG4Yj202+1FVO/XNwjMukJG5ASuxpYAQvv/oKj6q7kInEIvhLiGfcm3bpTzWQ6' + '\n' +
'6zVz3z/huLbEXEy5oj2fQaC5E3s5mdpk/CW3J6Tk4NY3NySWzE/2/ZOWxZdR79XC' + '\n' +
'+goNL6v/5gPI8B/a3Z8OeM2PfSZwPMnVuvU0bwIDAQABAoIBAQCnGAtNYkOOu8wW' + '\n' +
'F5Oid3aKwnwPytF211WQh3v2AcFU17qle+SMRi+ykBL6+u5RU5qH+HSc9Jm31AjW' + '\n' +
'V1yPrdYVZInFjYIJCPzorcXY5zDOmMAuzg5PBVV7VhUA0a5GZck6FC8AilDUcEom' + '\n' +
'GCK6Ul8mR9XELBFQ6keeTo2yDu0TQ4oBXrPBMN61uMHCxh2tDb2yvl8Zz+EllADG' + '\n' +
'70pztRWNOrCzrC+ARlmmDfYOUgVFtZin53jq6O6ullPLzhkm3/+QFRGYWsFgQB6J' + '\n' +
'Z9HJtW5YB47RT5RbLHKXeMc6IJW+d+5HrzgTdK79P7wAZk8JCIDyHe2AaNAUzc/G' + '\n' +
'sB0cNeURAoGBAOKtaVFa6z2F4Q+koMBXCt4m7dCJnaC+qthF249uEOIBeF3ds9Fq' + '\n' +
'f0jhhvuV0OcN8lYbR/ZlYRJDUs6mHh/2BYSkdeaLKojXTxKR2bA4xQk5dtJCdoPf' + '\n' +
'0c15AlTgOYk2oNXP/azDICJYT/cdvIdUL9P4IoZthu1FjwG266GacEnNAoGBAMZn' + '\n' +
'1wRUXS1dbqemoc+g48wj5r3/qsIG8PsZ2Y8W+oYW7diNA5o6acc8YPEWE2RbJDbX' + '\n' +
'YEADBnRSdzzOdo0JEj4VbNZEtx6nQhBOOrtYKnnqHVI/XOz3VVu6kedUKdBR87KC' + '\n' +
'eCzO1VcEeZtsTHuLO4t7NmdHGqNxTV+jLvzBoQsrAoGAI+fOD+nz6znirYSpRe5D' + '\n' +
'tW67KtYxlr28+CcQoUaQ/Au5kjzE9/4DjXrT09QmVAMciNEnc/sZBjiNzFf525wv' + '\n' +
'wZP/bPZMVYKtbsaVkdlcNJranHGUrkzswbxSRzmBQ5/YmCWrDAuYcnhEqmMWcuU9' + '\n' +
'8jiS13JP9hOXlHDyIBYDhV0CgYBV6TznuQgnzp9NpQ/H8ijxilItz3lHTu4mLMlR' + '\n' +
'9mdAjMkszdLTg5uuE+z+N8rp17VUseoRjb3LvLG4+MXIyDbH/0sDdPm+IjqvCNDR' + '\n' +
'spmh9MgBh0JbsbWaZK0s9/qrI/FcSLZ04JLsfRmTPU/Y5y8/dHjYO6fDQhp44RZF' + '\n' +
'iCqNxQKBgHf7KZIOKgV4YNyphk1UYWHNz8YY5o7WtaQ51Q+kIbU8PRd9rqJLZyk2' + '\n' +
'tKf8e6z+wtKjxi8GKQzE/IdkQqiFmB1yEjjRHQ81WS+K5NnjN1t0IEscJqOAwv9s' + '\n' +
'iIhG5ueb6xoj/N0LuXa8loUT5aChKWxRHEYdegqU48f+qxUcJj9R' + '\n' +
'-----END RSA PRIVATE KEY-----' + '\n'
}],PrivKey);

OUTPUT(dPrivKey,,PrivateKeyFile, CSV(SEPARATOR(''), TERMINATOR('')), OVERWRITE);

//PKE Encryption module definition
MyPKEModule := STD.Crypto.PublicKeyEncryptionFromLFN('RSA', PublicKeyFile, PrivateKeyFile, '');

DATA signature := myPKEModule.Sign((DATA)'The quick brown fox jumps');
OUTPUT(TRUE = myPKEModule.VerifySignature(signature, (DATA)'The quick brown fox jumps'));</programlisting>
  </sect1>
</chapter>
