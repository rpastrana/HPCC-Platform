<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<sect1 id="Dali-LDAP">
  <title>Dali and Security</title>

  <para>This section contains additional information about Dali and security
  settings.</para>

  <sect2 id="LDAP-Dali">
    <title>LDAP and Dali Security settings</title>

    <para>There are a few Dali security settings that impact the way that Dali
    performs. The following configurations further explain the impact of some
    common security settings.</para>

    <sect3 id="DaliNoLDAP">
      <title>Dali without LDAP</title>

      <para>If you configure Dali without any LDAP server bound:</para>

      <itemizedlist>
        <listitem>
          <para>Anyone can access any file and any workunit. Essentially, you
          have no security.</para>
        </listitem>

        <listitem>
          <para>Without an LDAP server configured, the CheckScopeScan
          attribute in the configuration is ignored. This means that any user
          can see the entire list of logical files and can access any
          file.</para>
        </listitem>

        <listitem>
          <para>Anyone can see, access, or even run any workunit.</para>
        </listitem>
      </itemizedlist>
    </sect3>

    <sect3>
      <title>Dali with LDAP Server and CheckScopeScans setting
      disabled</title>

      <para>In this scenario, you have your Dali bound to a LDAP server, and
      the CheckScopeScans attribute is set to false</para>

      <itemizedlist>
        <listitem>
          <para>The CheckScopeScans setting only impacts the listing of
          logical files.</para>
        </listitem>

        <listitem>
          <para>All file access calls are authorized by ensuring the caller
          has access to the given file scope.</para>
        </listitem>

        <listitem>
          <para>FilesDefaultUser credentials are injected if none provided.
          The <emphasis>filesDefaultUser</emphasis> is an LDAP account used to
          access files when no user credentials are supplied. This is similar
          to a guest account, so it should be an account with very limited
          access, if used at all. To disable access without credentials, leave
          filesDefaultUser attribute blank.</para>
        </listitem>

        <listitem>
          <para>Since the CheckScopeScans setting is disabled, users can see
          the entire list of logical files, even if user does not have access
          to view a file.</para>
        </listitem>
      </itemizedlist>
    </sect3>

    <sect3>
      <title>Dali with LDAP Server and CheckScopeScans setting enabled</title>

      <para>In this scenario, you have your Dali bound to a LDAP server, and
      the CheckScopeScans attribute is set to true.</para>

      <itemizedlist>
        <listitem>
          <para>All file access calls are authorized by ensuring the caller
          has access to the given file scope.</para>
        </listitem>

        <listitem>
          <para>Users can see files listed for all files within file scopes
          for which they have read access permission.</para>
        </listitem>
      </itemizedlist>

      <para>You should keep in mind since the system must make an external
      LDAP call to check every level in the scope, from the top to the bottom,
      that the depth of file scopes can have a performance cost in systems
      with File Scope Security enabled.</para>
    </sect3>
  </sect2>

  <sect2 id="WhitelistInDali" role="brk">
    <title>The AllowList in Dali</title>

    <para>The Dali server has the ability to restrict access to only those
    nodes that are associated with a role in the environment definition
    (environment.xml) or explicitly added to the <emphasis>AllowList
    </emphasis> in Dali's configuration. The AllowList is implicitly populated
    with the server components and their roles as defined in the environment.
    You can explicitly add additional nodes and their approved role(s) to a
    supplementary AllowList in the environment.xml file as shown in the
    following example:</para>

    <para><programlisting>&lt;Environment&gt;
...
 &lt;Software&gt;
 ...
   &lt;DaliServerProcess&gt;
     &lt;AllowList&gt;
      &lt;Entry hosts="adminnode1,192.168.0.101" roles="DaliDiag,DaliAdmin"/&gt;
      &lt;Entry hosts="adminnode3" roles="DaliDiag"/&gt;
     &lt;/AllowList&gt;
   ...
   &lt;/DaliServerProcess&gt;
 ...
 &lt;/Software&gt;
...
&lt;/Environment&gt;
</programlisting></para>

    <para>Hosts can be specified by hostname or IP address.</para>

    <para>Roles must be one of the following supported roles:</para>

    <para><simplelist columns="3" type="vert">
        <member>ThorMaster</member>

        <member>EclCCServer</member>

        <member>EclCC</member>

        <member>EclServer</member>

        <member>EclScheduler</member>

        <member>EclAgent</member>

        <member>AgentExec</member>

        <member>DaliServer</member>

        <member>DaliStop</member>

        <member>SashaServer</member>

        <member>DfuServer</member>

        <member>EspServer</member>

        <member>Config</member>

        <member>SchedulerAdmin</member>

        <member>RoxieMaster</member>

        <member>BackupGen</member>

        <member>DaFsControl</member>

        <member>SwapNode</member>

        <member>DaliAdmin</member>

        <member>UpdateEnv</member>

        <member>TreeView</member>

        <member>DaliDiag</member>

        <member>Testing</member>

        <member>XRef</member>

        <member>Monitoring</member>
      </simplelist></para>

    <para></para>

    <para>An entry can have one or more nodes (hosts that require access),
    specified in a comma separated list. Nodes can have one or more roles,
    specified in a comma separated list. Roles are case-sensitive.</para>

    <para>It should never be necessary to explicitly add the following roles
    for nodes within the same environment :</para>

    <para><programlisting>AgentExec, DaliServer, EclAgent, EclCC, EclCCServer, EclServer, EspServer, 
SashaServer, RoxieMaster, and ThorMaster </programlisting></para>

    <para>These roles correspond to components in the environment, which
    should always be implicitly allowlisted by inclusion in the environment.
    If nodes in a foreign environment need to communicate with Dali, then
    those nodes should be explicitly added.</para>

    <para>In addition, the following administrative tool roles are
    automatically allowlisted to run on the Dali server node:</para>

    <para><programlisting>Config, DaFsControl, DaliAdmin, DaliDiag, ScheduleAdmin, SwapNode, Testing, 
TreeView, UpdateEnv, XRef, Monitoring</programlisting></para>

    <?hard-pagebreak ?>

    <para>The only roles that are likely to be added are administrative tools
    and utilities that are not defined components, for example:</para>

    <para><programlisting>Config, DaFsControl, DaliAdmin, DaliDiag, SchedulerAdmin, SwapNode, Testing, 
TreeView, UpdateEnv, XRef</programlisting></para>

    <para>To disable the AllowList feature entirely, you can add:</para>

    <para><programlisting>&lt;AllowList enabled="false"/&gt;</programlisting><emphasis
    role="bold">This is not recommended for production
    environments.</emphasis></para>

    <para>When enabling the Dali AllowList on a cluster where there are other
    external environments interacting, it can be useful to initially disable
    the AllowList and audit the external components that are trying to connect
    with it by viewing the DaServer log files. Each client that would be
    refused access if the AllowList was enabled, creates log entries similar
    to this:</para>

    <para><programlisting>00000017 Operator 2019-11-20 16:58:39.617 17056 17074 
         "AllowList is disabled, ignoring: Access denied! 
         [client ip=192.168.9.12, role=DaliDiag] not AllowListed"</programlisting></para>

    <para>To allow legacy components that do not provide a role to connect,
    you can specify the allowAnonRoles option. The component MUST be on an
    allowlisted IP.</para>

    <para><programlisting>&lt;AllowList allowAnonRoles="false"/&gt;</programlisting></para>

    <sect3>
      <title>Retrieve the AllowList</title>

      <para>To retrieve the entire AllowList (implicit and explicit), use the
      <emphasis role="bold">dalidiag</emphasis> command line tool</para>

      <para>(found in /opt/HPCCSystems/bin/)</para>

      <para><programlisting>dalidiag &lt;dali-ip&gt; -AllowList</programlisting></para>
    </sect3>

    <sect3>
      <title>Update Dali without restarting</title>

      <para>To update AllowList information in Dali without restarting, use
      the <emphasis role="bold">updtdalienv</emphasis> command line
      tool</para>

      <para>(found in /opt/HPCCSystems/bin/)</para>

      <para><programlisting>updtdalienv &lt;environment-xml-file&gt; -i &lt;dali-ip&gt; </programlisting></para>
    </sect3>

    <sect3 role="brk">
      <title>Use envmod to add or remove entries in the supplementary
      AllowList</title>

      <para>We recommend using the <emphasis role="bold">envmod</emphasis>
      command line tool to add AllowList entries to your environment.xml file.
      The envmod utility can be found in /opt/HPCCSystems/bin/.</para>

      <para>Use a template file such as the following example:</para>

      <para><programlisting>{
    "name" : "AddAllowList",
    "description" : "Add AllowList to environment",
    "type" : "modification",
    "operations" : [
        {
            "action" : "find",
            "target_path" : "/Environment/Software/DaliServerProcess/AllowList",
            "data" : {
                "create_if_not_found" : true,
                "save" : {
                    "name" : "AllowListNodeId"
                }
            }
        },
        {
            "action" : "create",
            "target_nodeid" : "{{AllowListNodeId}}",
            "data" : {
                "node_type" : "Entry",
                "attributes" : [
                    {
                        "name" : "hosts",
                        "value" : "adminnode1,192.168.0.101"
                    },
                    {
                        "name" : "roles",
                        "value" : "DaliDiag,DaliAdmin"
                    }
                ]
            }
        },
{
            "action" : "create",
            "target_nodeid" : "{{AllowListNodeId}}",
            "data" : {
                "node_type" : "Entry",
                "attributes" : [
                    {
                        "name" : "hosts",
                        "value" : "adminnode3"
                    },
                    {
                        "name" : "roles",
                        "value" : "DaliDiag"
                    }
                ]
            }
        }
    ]
}</programlisting>This example adds the DaliDiag and DaliAdmin roles to two
      nodes. One node is specified using its hostname (adminnode1). The other
      is referenced by IP address. It adds the DaliDiag role to the
      adminnode3. The result matches the example XML shown earlier.</para>

      <?hard-pagebreak ?>

      <para>Sample command line:</para>

      <programlisting>sudo /opt/HPCCSystems/bin/envmod \
     -t myAllowListTemplate.json \
     -e /etc/HPCCSystems/source/environment.xml \
     -d /opt/HPCCSystems/componentfiles/configschema/xsd \
     -o /etc/HPCCSystems/source/environmentWithAllowList.xml</programlisting>

      <para>The -t (or --template) parameter is the location of the
      template.</para>

      <para>The -e (or --env) parameter is the location of the environment
      file. If omitted, the action validates the template.</para>

      <para>The -d (or --schema-dir) parameter is the location of the schema
      files.</para>

      <para>The -o (or --output) parameter is the location of the output file.
      If you specify -o without a full path to a file, it overwrites the input
      file.</para>

      <para><emphasis role="bold">Once you have modified your environment, you
      MUST copy environment.xml to every node. </emphasis></para>

      <para><emphasis role="bold"></emphasis></para>

      <para>To remove an entry, use a template like the following:</para>

      <para><programlisting>{
    “action” : “delete”,
    “target_path” : “/Environment/Software/DaliServerProcess/AllowList/Entry[@hosts=’node3’]”
}
</programlisting></para>
    </sect3>
  </sect2>
</sect1>
